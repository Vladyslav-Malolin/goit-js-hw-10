{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst input = document.querySelector(\"#datetime-picker\");\nconst startBtn = document.querySelector(\"[data-start]\");\nconst daysEl = document.querySelector(\"[data-days]\");\nconst hoursEl = document.querySelector(\"[data-hours]\");\nconst minutesEl = document.querySelector(\"[data-minutes]\");\nconst secondsEl = document.querySelector(\"[data-seconds]\");\n\nlet userSelectedDate = null;\nlet countdownInterval = null;\n\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n        const selectedTime = selectedDates[0];\n        if (selectedTime <= new Date()) {\n            iziToast.error({ message: \"Please choose a date in the future\" });\n            startBtn.disabled = true;\n        } else {\n            startBtn.disabled = false;\n            userSelectedDate = selectedTime;\n        }\n    },\n};\n\nflatpickr(input, options);\n\nstartBtn.addEventListener(\"click\", () => {\n    if (!userSelectedDate) return;\n\n    startBtn.disabled = true;\n    input.disabled = true;\n\n    countdownInterval = setInterval(() => {\n        const now = new Date();\n        const timeLeft = userSelectedDate - now;\n\n        if (timeLeft <= 0) {\n            clearInterval(countdownInterval);\n            updateTimerUI(0, 0, 0, 0);\n            input.disabled = false;\n            return;\n        }\n\n        const { days, hours, minutes, seconds } = convertMs(timeLeft);\n        updateTimerUI(days, hours, minutes, seconds);\n    }, 1000);\n});\n\nfunction convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    return {\n        days: Math.floor(ms / day),\n        hours: Math.floor((ms % day) / hour),\n        minutes: Math.floor(((ms % day) % hour) / minute),\n        seconds: Math.floor((((ms % day) % hour) % minute) / second),\n    };\n}\n\nfunction updateTimerUI(days, hours, minutes, seconds) {\n    daysEl.textContent = addLeadingZero(days);\n    hoursEl.textContent = addLeadingZero(hours);\n    minutesEl.textContent = addLeadingZero(minutes);\n    secondsEl.textContent = addLeadingZero(seconds);\n}\n\nfunction addLeadingZero(value) {\n    return String(value).padStart(2, \"0\");\n}\n"],"names":["input","startBtn","daysEl","hoursEl","minutesEl","secondsEl","userSelectedDate","countdownInterval","options","selectedDates","selectedTime","iziToast","flatpickr","timeLeft","updateTimerUI","days","hours","minutes","seconds","convertMs","ms","addLeadingZero","value"],"mappings":"2GAKA,MAAMA,EAAQ,SAAS,cAAc,kBAAkB,EACjDC,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAS,SAAS,cAAc,aAAa,EAC7CC,EAAU,SAAS,cAAc,cAAc,EAC/CC,EAAY,SAAS,cAAc,gBAAgB,EACnDC,EAAY,SAAS,cAAc,gBAAgB,EAEzD,IAAIC,EAAmB,KACnBC,EAAoB,KAExB,MAAMC,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACnB,MAAMC,EAAeD,EAAc,CAAC,EAChCC,GAAgB,IAAI,MACpBC,EAAS,MAAM,CAAE,QAAS,oCAAsC,CAAA,EAChEV,EAAS,SAAW,KAEpBA,EAAS,SAAW,GACpBK,EAAmBI,EAE1B,CACL,EAEAE,EAAUZ,EAAOQ,CAAO,EAExBP,EAAS,iBAAiB,QAAS,IAAM,CAChCK,IAELL,EAAS,SAAW,GACpBD,EAAM,SAAW,GAEjBO,EAAoB,YAAY,IAAM,CAElC,MAAMM,EAAWP,EADL,IAAI,KAGhB,GAAIO,GAAY,EAAG,CACf,cAAcN,CAAiB,EAC/BO,EAAc,EAAG,EAAG,EAAG,CAAC,EACxBd,EAAM,SAAW,GACjB,MACH,CAED,KAAM,CAAE,KAAAe,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUN,CAAQ,EAC5DC,EAAcC,EAAMC,EAAOC,EAASC,CAAO,CAC9C,EAAE,GAAI,EACX,CAAC,EAED,SAASC,EAAUC,EAAI,CAMnB,MAAO,CACH,KAAM,KAAK,MAAMA,EAAK,KAAG,EACzB,MAAO,KAAK,MAAOA,EAAK,MAAO,IAAI,EACnC,QAAS,KAAK,MAAQA,EAAK,MAAO,KAAQ,GAAM,EAChD,QAAS,KAAK,MAASA,EAAK,MAAO,KAAQ,IAAU,GAAM,CACnE,CACA,CAEA,SAASN,EAAcC,EAAMC,EAAOC,EAASC,EAAS,CAClDhB,EAAO,YAAcmB,EAAeN,CAAI,EACxCZ,EAAQ,YAAckB,EAAeL,CAAK,EAC1CZ,EAAU,YAAciB,EAAeJ,CAAO,EAC9CZ,EAAU,YAAcgB,EAAeH,CAAO,CAClD,CAEA,SAASG,EAAeC,EAAO,CAC3B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACxC"}